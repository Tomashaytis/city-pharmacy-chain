﻿
@inject CityPharmacyChainApiWrapper ClientApi

<Modal @ref="PharmacyModal">
    <ModalContent Centered>
        <Form>
            <ModalHeader>
                <ModalTitle>Добавление аптеки</ModalTitle>
                <CloseButton Clicked="ClosePharmacyModalAsync" />
            </ModalHeader>

            <ModalBody>
                <Field>
                    <FieldLabel RequiredIndicator>Номер аптеки</FieldLabel>
                    <NumericEdit @bind-Value="@NewPharmacy.PharmacyNumber" />
                </Field>
                <Field>
                    <FieldLabel RequiredIndicator>Название аптеки</FieldLabel>
                    <TextEdit @bind-Text="@NewPharmacy.Name" />
                </Field>
                <Field>
                    <FieldLabel RequiredIndicator>Номер телефона аптеки</FieldLabel>
                    <Validation UsePattern>
                        <NumericEdit @bind-Value="@NewPharmacy.PhoneNumber" Pattern="^(?!0+$)(\+\d{1,3}[- ]?)?(?!0+$)\d{10,15}$">
                            <Feedback>
                                <ValidationError>Неправильный формат номера телефона.</ValidationError>
                            </Feedback>
                        </NumericEdit>
                    </Validation>
                </Field>
                <Field>
                    <FieldLabel RequiredIndicator>Адрес аптеки</FieldLabel>
                    <TextEdit @bind-Text="@NewPharmacy.Address" />
                </Field>
                <Field>
                    <FieldLabel RequiredIndicator>ФИО директора аптеки</FieldLabel>
                    <TextEdit @bind-Text="@NewPharmacy.DirectorFullName" />
                </Field>
            </ModalBody>

            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="ClosePharmacyModalAsync">Отмена</Button>
                <Button Color="Color.Primary" Clicked="CreatePharmacyAsync">Создать</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code {
    /// <summary>
    /// Идентификатор аптеки
    /// </summary>
    [Parameter]
    public int? PharmacyId { get; set; }

    /// <summary>
    /// Пробрасываемое событие для оповещения родительского компонента об изменении данных
    /// </summary>
    [Parameter]
    public EventCallback OnPharmacyAdded { get; set; }

    /// <summary>
    /// Модальное окно для сущности класса аптека
    /// </summary>
    private Modal PharmacyModal { get; set; } = new();

    /// <summary>
    /// Добавляемая сущность класса аптека
    /// </summary>
    private PharmacyDto NewPharmacy { get; set; } = new();

    /// <summary>
    /// Переопределение метода OnInitializedAsync
    /// </summary>
    /// <returns>Асинхронная задача</returns>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Метод открывает модальное окно
    /// </summary>
    /// <returns>Асинхронная задача</returns>
    public async Task Show() => await PharmacyModal.Show();

    /// <summary>
    /// Метод закрывает модальное окно
    /// </summary>
    /// <returns>Асинхронная задача</returns>
    private async Task ClosePharmacyModalAsync() => await PharmacyModal.Hide();

    /// <summary>
    /// Метод добавляет к данным на сервере новую сущность класса аптека
    /// </summary>
    /// <returns>Асинхронная задача</returns>
    private async Task CreatePharmacyAsync()
    {
        _ = await ClientApi.PharmacyPost(NewPharmacy);
        await PharmacyModal.Hide();
        await OnPharmacyAdded.InvokeAsync();
    }
}
