﻿
@inject CityPharmacyChainApiWrapper Client
@inject INotificationService NotificationService;

<Modal @ref="PharmaceuticalGroupModal">
    <ModalContent Centered>
        <Form>
            <ModalHeader>
                <ModalTitle>Добавление фармацевтической группы</ModalTitle>
                <CloseButton Clicked="ClosePharmaceuticalGroupModalAsync" />
            </ModalHeader>

            <ModalBody>
                <Field>
                    <FieldLabel>Название</FieldLabel>
                    <TextEdit @bind-Text="@NewPharmaceuticalGroup.Name" />
                </Field>
                <Field>
                    <FieldLabel>Код препарата</FieldLabel>
                    <NumericEdit @bind-Value="@ProductCode" />
                </Field>
            </ModalBody>

            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="ClosePharmaceuticalGroupModalAsync">Отмена</Button>
                <Button Color="Color.Primary" Clicked="CreatePharmaceuticalGroupAsync">Создать</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code {
    /// <summary>
    /// Идентификатор фармацевтической группы
    /// </summary>
    [Parameter]
    public int? PharmaceuticalGroupId { get; set; }

    /// <summary>
    /// Пробрасываемое событие для оповещения родительского компонента об изменении данных
    /// </summary>
    [Parameter]
    public EventCallback OnPharmaceuticalGroupAdded { get; set; }

    /// <summary>
    /// Код препарата для получения по нему ProductId
    /// </summary>
    private int ProductCode { get; set; }

    /// <summary>
    /// Модальное окно для сущности класса фармацевтическая группа
    /// </summary>
    private Modal PharmaceuticalGroupModal { get; set; } = new();

    /// <summary>
    /// Добавляемая сущность класса фармацевтическая группа
    /// </summary>
    private PharmaceuticalGroupDto NewPharmaceuticalGroup { get; set; } = new();

    /// <summary>
    /// Переопределение метода OnInitializedAsync
    /// </summary>
    /// <returns>Асинхронная задача</returns>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Метод открывает модальное окно
    /// </summary>
    /// <returns>Асинхронная задача</returns>
    public async Task Show() => await PharmaceuticalGroupModal.Show();

    /// <summary>
    /// Метод закрывает модальное окно
    /// </summary>
    /// <returns>Асинхронная задача</returns>
    private async Task ClosePharmaceuticalGroupModalAsync() => await PharmaceuticalGroupModal.Hide();

    /// <summary>
    /// Метод добавляет к данным на сервере новую сущность класса фармацевтическая группа
    /// </summary>
    /// <returns>Асинхронная задача</returns>
    private async Task CreatePharmaceuticalGroupAsync()
    {
        var products = (await Client.ProductGetAll()).ToList();
        var success = false;
        foreach (var product in products)
        {
            if (product.ProductCode == ProductCode)
            {
                success = true;
                NewPharmaceuticalGroup.ProductId = product.ProductId;
                _ = await Client.PharmaceuticalGroupPost(NewPharmaceuticalGroup);
            }
        }
        if (!success)
            await NotificationService.Warning("Неверно введённые данные", $"Препарат не найден.");
        await PharmaceuticalGroupModal.Hide();
        await OnPharmaceuticalGroupAdded.InvokeAsync();
    }
}

