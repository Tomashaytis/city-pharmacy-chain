
@inject CityPharmacyChainApiWrapper Client
@inject NavigationManager NavManager

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h4>Аптеки</h4>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary" Clicked="OpenCreateModal">
                    Добавить
                </Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="PharmacyFullDto" Data="@Pharmacies" PageSize="5" Responsive Filterable>
            
            <DataGridDateColumn Field="@nameof(PharmacyFullDto.PharmacyNumber)" Caption="Number of Pharmacy" Editable />
            <DataGridDateColumn Field="@nameof(PharmacyFullDto.Name)" Caption="Name of Pharmacy" Editable />
            <DataGridDateColumn Field="@nameof(PharmacyFullDto.PhoneNumber)" Caption="Phone number of Pharmacy" Editable />
            <DataGridDateColumn Field="@nameof(PharmacyFullDto.Address)" Caption="Address of Pharmacy" Editable />
            <DataGridDateColumn Field="@nameof(PharmacyFullDto.DirectorFullName)" Caption="Director full name for Pharmacy" Editable />
            <DataGridColumn Width="150px"
                            TItem="PharmacyFullDto"
                            Field="@nameof(PharmacyFullDto.PharmacyId)"
                            Caption="Действия">
                <DisplayTemplate>
                    <Dropdown>
                        <DropdownToggle Color="Color.Primary">
                            Действия
                        </DropdownToggle>
                        <DropdownMenu>
                            <DropdownItem Clicked="() => OpenEditPageAsync(context)">
                                Редактировать
                            </DropdownItem>
                            <DropdownItem Clicked="() => DeletePharmacyAsync(context)">
                                Удалить
                            </DropdownItem>
                        </DropdownMenu>
                    </Dropdown>
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridCommandColumn />
        </DataGrid>
    </CardBody>
</Card>

<PharmacyCreateModal @ref="PharmacyCreateModal" PharmacyId="PharmacyId" OnPharmacyAdded="@HandlePharmacyAdded" />

@code {
    public List<PharmacyFullDto> Pharmacies { get; set; } = [];

    [Parameter]
    public int? PharmacyId { get; set; }

    [Parameter]
    public EventCallback OnDataChanged { get; set; }

    private PharmacyCreateModal PharmacyCreateModal { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshPharmacyCollection();
        await base.OnInitializedAsync();
    }

    private void OpenEditPageAsync(PharmacyFullDto context)
    {
        NavManager.NavigateTo($"pharmacy/{context.PharmacyId}");
    }

    private async Task DeletePharmacyAsync(PharmacyFullDto context)
    {
        await Client.PharmacyDelete(context.PharmacyId);
        await RefreshPharmacyCollection();
        await OnDataChanged.InvokeAsync();
    }

    private async Task HandlePharmacyAdded()
    {
        await RefreshPharmacyCollection();
        await OnDataChanged.InvokeAsync();
    }

    private async Task OpenCreateModal() => await PharmacyCreateModal.Show();

    private async Task RefreshPharmacyCollection()
    {
         Pharmacies = (await Client.PharmacyGetAll()).ToList();
    }
}

