﻿
@inject CityPharmacyChainApiWrapper ClientApi

<Modal @ref="ProductModal">
    <ModalContent Centered>
        <Form>
            <ModalHeader>
                <ModalTitle>Добавление препарата</ModalTitle>
                <CloseButton Clicked="CloseProductModalAsync" />
            </ModalHeader>

            <ModalBody>
                <Field>
                    <FieldLabel RequiredIndicator>Код препарата</FieldLabel>
                    <NumericEdit @bind-Value="@NewProduct.ProductCode" />
                </Field>
                <Field>
                    <FieldLabel RequiredIndicator>Название препарата</FieldLabel>
                    <TextEdit @bind-Text="@NewProduct.Name" />
                </Field>
                <Field>
                    <FieldLabel RequiredIndicator>Товарная группа препарата</FieldLabel>
                    <TextEdit @bind-Text="@NewProduct.ProductGroup" />
                </Field>
            </ModalBody>

            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="CloseProductModalAsync">Отмена</Button>
                <Button Color="Color.Primary" Clicked="CreateProductAsync">Создать</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code {
    /// <summary>
    /// Идентификатор препарата
    /// </summary>
    [Parameter]
    public int? ProductId { get; set; }

    /// <summary>
    /// Пробрасываемое событие для оповещения родительского компонента об изменении данных
    /// </summary>
    [Parameter]
    public EventCallback OnProductAdded { get; set; }

    /// <summary>
    /// Модальное окно для сущности класса препарат
    /// </summary>
    private Modal ProductModal { get; set; } = new();

    /// <summary>
    /// Добавляемая сущность класса препарат
    /// </summary>
    private ProductDto NewProduct { get; set; } = new();

    /// <summary>
    /// Переопределение метода OnInitializedAsync
    /// </summary>
    /// <returns>Асинхронная задача</returns>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Метод открывает модальное окно
    /// </summary>
    /// <returns>Асинхронная задача</returns>
    public async Task Show() => await ProductModal.Show();

    /// <summary>
    /// Метод закрывает модальное окно
    /// </summary>
    /// <returns>Асинхронная задача</returns>
    private async Task CloseProductModalAsync() => await ProductModal.Hide();

    /// <summary>
    /// Метод добавляет к данным на сервере новую сущность класса препарат
    /// </summary>
    /// <returns>Асинхронная задача</returns>
    private async Task CreateProductAsync()
    {
        var result = await ClientApi.ProductPost(NewProduct);
        await ProductModal.Hide();
        await OnProductAdded.InvokeAsync();
    }
}
